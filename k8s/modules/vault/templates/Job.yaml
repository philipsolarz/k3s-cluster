apiVersion: batch/v1
kind: Job
metadata:
  name: vault-setup
  namespace: vault
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    spec:
      serviceAccountName: vault-auth
      restartPolicy: OnFailure
      containers:
        - name: init-vault
          image: solarzphilip/vault-kubectl-utility:0.1.2
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          command: ["/bin/bash", "-c"]
          args:
            - |
              vault operator init -format=json > /vault/file/init.json
              kubectl create secret generic vault-unseal-keys --from-file=/vault/file/init.json -n vault
              echo "Vault initialized and keys stored."
        - name: unseal-vault
          image: solarzphilip/vault-kubectl-utility:0.1.2
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          command: ["/bin/bash", "-c"]
          args:
            - |
              export INIT_FILE=/vault/file/init.json
              kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.init\.json}' | base64 --decode > $INIT_FILE
              vault operator unseal $(jq -r '.unseal_keys_b64[0]' $INIT_FILE)
              vault operator unseal $(jq -r '.unseal_keys_b64[1]' $INIT_FILE)
              vault operator unseal $(jq -r '.unseal_keys_b64[2]' $INIT_FILE)
              echo "Vault unsealed."
        - name: configure-vault
          image: solarzphilip/vault-kubectl-utility:0.1.2
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          command: ["/bin/bash", "-c"]
          args:
            - |
              export INIT_FILE=/vault/file/init.json
              kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.init\.json}' | base64 --decode > $INIT_FILE
              export VAULT_TOKEN=$(jq -r '.root_token' $INIT_FILE)
              vault login $VAULT_TOKEN
              vault secrets enable -path=secret kv-v2
              vault policy write k8s-secret-policy - <<EOF
              path "secret/data/*" {
                capabilities = ["read", "list", "create", "update", "delete"]
              }
              EOF
              echo "Vault configured."
        - name: enable-kubernetes-auth
          image: solarzphilip/vault-kubectl-utility:0.1.2
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          command: ["/bin/bash", "-c"]
          args:
            - |
              vault auth enable kubernetes
              echo "Kubernetes auth enabled."
        - name: configure-kubernetes-auth
          image: solarzphilip/vault-kubectl-utility:0.1.2
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          command: ["/bin/bash", "-c"]
          args:
            - |
              vault write auth/kubernetes/config \
                  token_reviewer_jwt="$(kubectl get secret vault-auth -n vault -o jsonpath='{.data.token}' | base64 --decode)" \
                  kubernetes_host="$(kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[0].cluster.server}')" \
                  kubernetes_ca_cert="$(kubectl get secret vault-auth -n vault -o jsonpath='{.data.ca\.crt}' | base64 --decode)"
              echo "Kubernetes authentication configured in Vault."
        - name: create-vault-role
          image: solarzphilip/vault-kubectl-utility:0.1.2
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          command: ["/bin/bash", "-c"]
          args:
            - |
              vault write auth/kubernetes/role/vault-role \
                  bound_service_account_names=vault-auth \
                  bound_service_account_namespaces=vault \
                  policies=k8s-secret-policy \
                  ttl=1h
              echo "Vault role created successfully."
